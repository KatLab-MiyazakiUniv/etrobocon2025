@startuml etrobocon2025-class-diagram
!pragma useVerticalIf on

' レイアウト調整
skinparam linetype ortho
skinparam nodesep 50
skinparam ranksep 50
skinparam minClassWidth 100
skinparam maxMessageSize 150
skinparam maxBoxSize 150
skinparam svgMaxWidth 10000
skinparam svgMaxHeight 6000
skinparam defaultFontSize 10
skinparam classFontSize 9
skinparam packageFontSize 10

' 配置指示
!define LAYOUT_TOP_TO_BOTTOM_DIRECTION top to bottom direction

' サブシステム、ロボコンスナップ攻略システム
package "ロボコンスナップ攻略システム" {
  package "走行計画部" {
    ' コマンドの列挙型
    enum COMMAND {
      AR
      DS
      CS
      DL
      DCL
      ' CDCL
      CL
      CDL
      EC
      SL
      SS
      MCA
      BCA
      CRA
      ' NONE
    }

    ' 攻略エリアの列挙型
    enum Area {
      LineTrace
      DoubleLoop
      SmartCarry
    }

    ' メインクラス
    class EtRobocon2025 {
      + {static} start(): void
      - {static} robot: Robot
    }

    ' エリアマスタークラス
    class AreaMaster {
      + run(): void
      - area: Area
      - isLeftCourse: bool
      - targetBrightness: int
      - {static} const basePath: std::string
      - {static} const areaCommandNames: std::array<std::string, 3>
    }

    ' キャリブレータクラス
    class Calibrator {
      + selectAndSetCourse(): void
      + measureAndSetTargetBrightness(): void
      + getAngleCheckFrame(): void
      + waitForStart(): void
      + getIsLeftCourse(): bool
      + getTargetBrightness(): int
      - isLeftCourse: bool
      - targetBrightness: int
    }

    ' モーションパーサークラス
    class MotionParser {
      + {static} createMotions(Robot& robot, std::string& commandFilePath, int targetBrightness): std::vector<Motion*>
      - {static} convertCommand(const std::string& str): COMMAND
      - {static} convertBool(const std::string& command, const std::string& stringParameter): bool
    }

    ' ユーティリティクラス
    class StringOperator {
      + {static} removeEOL(const std::string& str): std::string
    }
  }
}

' サブシステム、走行体情報管理システム
package "走行体情報管理システム" {
  package "走行体情報中継部" {
    ' ミニフィグ方向判定結果
    struct MiniFigDirectionResult {
      + wasDetected: bool
      + direction: MiniFigDirection
    }

    ' ミニフィグ方向の列挙型
    enum MiniFigDirection {
      FRONT
      RIGHT
      BACK
      LEFT
    }

    ' 風景方向判定結果
    struct BackgroundDirectionResult {
      + wasDetected: bool
      + direction: BackgroundDirection
    }

    ' 風景方向の列挙型
    enum BackgroundDirection {
      FRONT
      RIGHT
      BACK
      LEFT
    }

    ' システム定数
    class SystemInfo <<constants>> {
      + {static} PI: double
      + {static} RAD_TO_DEG: double
      + {static} DEG_TO_RAD: double
      + {static} constexpr TREAD: double
      + {static} constexpr WHEEL_RADIUS: double
      + {static} constexpr RESOLUTION_WIDTH: int
      + {static} constexpr RESOLUTION_HEIGHT: int
      + {static} constexpr MIN_WIDTH: int
      + {static} constexpr MIN_HEIGHT: int
      + {static} constexpr MAX_WIDTH: int
      + {static} constexpr MAX_HEIGHT: int
    }

    ' ロボットクラス
    ' backgroundDirectionResult は実装予定の変数と関係を記述している
    class Robot {
      + Robot()
      + Robot(ICameraCapture& cam)
      + getMotorControllerInstance(): MotorController&
      + getCameraCaptureInstance(): ICameraCapture&
      + getColorSensorInstance(): spikeapi::ColorSensor&
      + getClockInstance(): spikeapi::Clock&
      + getButtonInstance(): spikeapi::Button&
      + getForceSensorInstance(): spikeapi::ForceSensor&
      + getDisplayInstance(): spikeapi::Display&
      + setIsLeftEdge(bool isLeft): void
      + getIsLeftEdge() const: bool
      + getMiniFigDirectionResult(): MiniFigDirectionResult&
      + getBackgroundDirectionResult(): BackgroundDirectionResult&
      - motorController: MotorController
      - defaultCameraCapture: CameraCapture
      - cameraCapture: ICameraCapture&
      - colorSensor: spikeapi::ColorSensor
      - clock: spikeapi::Clock
      - button: spikeapi::Button
      - forceSensor: spikeapi::ForceSensor
      - display: spikeapi::Display
      - miniFigDirectionResult: MiniFigDirectionResult
      - backgroundDirectionResult: BackgroundDirectionResult
      - isLeftEdge: bool
    }
  }

' サブシステム、SPIKE API ラッパー
  package "SPIKE API ラッパー" {
    ' モーターコントローラークラス
    class MotorController {
      + {static} constexpr MOTOR_POWER_MAX: int
      + {static} constexpr MOTOR_POWER_MIN: int
      + MotorController()
      + setRightMotorPower(int power): void
      + setLeftMotorPower(int power): void
      + resetRightMotorPower(): void
      + resetLeftMotorPower(): void
      + resetWheelsMotorPower(): void
      + setRightMotorSpeed(double speed): void
      + setLeftMotorSpeed(double speed): void
      + stopWheelsMotor(): void
      + brakeWheelsMotor(): void
      + setArmMotorPower(int power): void
      + resetArmMotorPower(): void
      + stopArmMotor(): void
      + holdArmMotor(): void
      + getRightMotorCount(): int32_t
      + getLeftMotorCount(): int32_t
      + getArmMotorCount(): int32_t
      + getRightMotorPower(): int
      + getLeftMotorPower(): int
      + getArmMotorPower(): int
      + getRightMotorSpeed(): double
      + getLeftMotorSpeed(): double
      - rightWheel: spikeapi::Motor
      - leftWheel: spikeapi::Motor
      - armMotor: spikeapi::Motor
      - limitPowerValue(int inputPower): int
    }
  }
}

' サブシステム、走行制御システム
package "走行制御システム" {
  package "計算部" {
    ' PIDゲイン
    struct PidGain {
      + kp: double
      + ki: double
      + kd: double
    }

    ' 色の列挙型
    enum COLOR {
      NONE
      BLACK
      WHITE
      BLUE
      GREEN
      YELLOW
      RED
    }

    ' PID制御クラス
    class Pid {
      + setPidGain(double _kp, double _ki, double _kd): void
      + calculatePid(double currentValue, double delta): double
      - pidGain: PidGain
      - prevDeviation: double
      - integral: double
      - filteredDerivative: double
      - targetValue: double
      - maxIntegral: double
      - minIntegral: double
      - {static} constexpr alpha: double
    }

    ' 色識別クラス
    class ColorJudge {
      + {static} convertStringToColor(const std::string& str): COLOR
      + {static} convertColorToString(const COLOR& color): const char*
      + {static} convertHsvToColor(const spikeapi::ColorSensor::HSV& hsv): COLOR
    }

    ' 走行距離計算クラス
    class Mileage {
      + {static} calculateWheelMileage(int32_t angle): double
      + {static} calculateMileage(int32_t rightAngle, int32_t leftAngle): double
    }

    ' 速度計算クラス
    class SpeedCalculator {
      + SpeedCalculator(Robot& _robot, double _targetSpeed)
      + calculateRightMotorPower(): double
      + calculateLeftMotorPower(): double
      - const targetSpeed: double
      - rightPid: Pid
      - leftPid: Pid
      - rightMotorPower: double
      - leftMotorPower: double
      - prevRightTime: double
      - prevLeftTime: double
      - {static} constexpr RIGHT_K_P: double
      - {static} constexpr RIGHT_K_I: double
      - {static} constexpr RIGHT_K_D: double
      - {static} constexpr LEFT_K_P: double
      - {static} constexpr LEFT_K_I: double
      - {static} constexpr LEFT_K_D: double
    }
  }

  package "動作部" {
    ' Motionクラス
    abstract class Motion {
      + Motion(Robot& _robot)
      + {abstract} run(): void
      # robot: Robot&
    }

    ' 応用動作クラス
    abstract class CompositeMotion {
      + CompositeMotion(Robot& _robot)
      + {abstract} run(): void
    }

    ' ライントレースクラス
    abstract class LineTrace {
      + run(): void
      # {abstract} isMetPreCondition(): bool
      # {abstract} prepare(): void
      # {abstract} isMetContinuationCondition(): bool
      # targetSpeed: double
      # targetBrightness: int
      # pidGain: PidGain
    }

    ' 直進クラス
    abstract class Straight {
      + run(): void
      # {abstract} isMetPreCondition(): bool
      # {abstract} prepare(): void
      # {abstract} isMetContinuationCondition(): bool
      # targetSpeed: double
    }

    ' 回頭クラス
    abstract class Rotation {
      + run(): void
      + {abstract} isMetPreCondition(): bool
      + {abstract} prepare(): void
      + {abstract} isMetContinuationCondition(): bool
      # speed: double
      # isClockwise: bool
      # leftSign: int
      # rightSign: int
    }

    ' 色指定ライントレースクラス
    class ColorLineTrace {
      # isMetPreCondition(): bool
      # prepare(): void
      # isMetContinuationCondition(): bool
      - {static} constexpr JUDGE_COUNT: int
      - colorCount: int
      - targetColor: COLOR
    }

    ' 距離指定ライントレースクラス
    class DistanceLineTrace {
      # isMetPreCondition(): bool
      # prepare(): void
      # isMetContinuationCondition(): bool
      - targetDistance: double
      - initDistance: double
    }

    ' 色距離指定ライントレースクラス
    class ColorDistanceLineTrace {
      # isMetPreCondition(): bool
      # prepare(): void
      # isMetContinuationCondition(): bool
      - {static} constexpr JUDGE_COUNT: int
      - colorCount: int
      - targetColor: COLOR
      - targetDistance: double
      - initDistance: double
    }

    ' 距離指定直進クラス
    class DistanceStraight {
      # isMetPreCondition(): bool
      # prepare(): void
      # isMetContinuationCondition(): bool
      - targetDistance: double
      - initialDistance: double
    }

    ' 色指定直進クラス
    class ColorStraight {
      # isMetPreCondition(): bool
      # prepare(): void
      # isMetContinuationCondition(): bool
      - colorCount: int
      - targetColor: COLOR
      - {static} constexpr JUDGE_COUNT: int
    }

    ' 角度指定回頭クラス
    class AngleRotation {
      # prepare(): void
      # isMetPreCondition(): bool
      # isMetContinuationCondition(): bool
      - targetLeftDistance: double
      - targetRightDistance: double
      - targetAngle: int
    }

    ' カメラ走行系、地区大会のモデルでは書かない予定

    ' カメラPID監視クラス
    ' abstract class CameraPidTracking {
    '   + run(): void
    '   # {abstract} isMetPreCondition(): bool
    '   # {abstract} prepare(): void
    '   # {abstract} isMetContinuationCondition(): bool
    '   # boundingBoxDetector: BoundingBoxDetector&
    '   # result: BoundingBoxDetectionResult
    '   # targetSpeed: double
    '   # targetXCoordinate: int
    '   # pidGain: PidGain
    ' }

    ' 距離指定カメラライントレースクラス
    ' class DistanceCameraLineTrace {
    '   # isMetPreCondition(): bool
    '   # prepare(): void
    '   # isMetContinuationCondition(): bool
    '   - targetDistance: double
    '   - initDistance: double
    '   - detector: std::unique_ptr<BoundingBoxDetector>
    ' }

    ' 色距離指定カメラライントレースクラス
    ' class ColorDistanceCameraLineTrace {
    '   # isMetPreCondition(): bool
    '   # prepare(): void
    '   # isMetContinuationCondition(): bool
    '   - {static} constexpr JUDGE_COUNT: int
    '   - colorCount: int
    '   - targetColor: COLOR
    '   - targetDistance: double
    '   - initDistance: double
    '   - detector: std::unique_ptr<BoundingBoxDetector>
    ' }

    ' カメラフレーム復帰クラス
    ' class CameraRecoveryAction {
    '   + run(): void
    '   - boundingBoxDetector: std::unique_ptr<BoundingBoxDetector>
    '   - result: BoundingBoxDetectionResult
    '   - recoveryAngle: int
    '   - speed: double
    '   - isClockwise: bool
    '   - {static} constexpr FRAME_NUMBER: int
    ' }

    ' エッジ変更クラス
    class EdgeChange {
      + run(): void
      - isLeftEdge: bool
    }

    ' スリープクラス
    class Sleeping {
      + run(): void
      - milliSec: int
    }
  }
}

' サブシステム、カメラ撮影システム
package "カメラ撮影システム" {
  package "撮影部" {
    ' カメラキャプチャーインターフェース
    abstract class ICameraCapture {
      + {abstract} ~ICameraCapture()
      + {abstract} findAvailableCameraID(int maxTested): int
      + {abstract} getCameraID(): int
      + {abstract} setCameraID(int id): bool
      + {abstract} openCamera(): bool
      + {abstract} setCapProps(double width, double height): void
      + {abstract} getFrame(cv::Mat& outFrame): bool
    }

    ' カメラキャプチャークラス
    ' + getFrames(std::vector<cv::Mat>& frames, int numFrames, int millisecondInterval): bool
    ' getFrames 関数は未使用であるため、クラス図に含めない
    class CameraCapture {
      + CameraCapture()
      + ~CameraCapture()
      + findAvailableCameraID(int maxTested): int
      + getCameraID(): int
      + setCameraID(int id): bool
      + openCamera(): bool
      + setCapProps(double width, double height): void
      + getFrame(cv::Mat& outFrame): bool
      - cap: cv::VideoCapture
      - cameraID: int
    }

    ' スナップショットクラス
    ' スナップショットクラスはデバッグ用のクラスなので、クラス図に含めない
    ' class Snapshot {
    '   + run(): void
    '   - fileName: std::string
    '   - {static} const path: std::string
    ' }

    ' フレーム保存クラス
    class FrameSave {
      + {static} save(cv::Mat& frame, const std::string& filePath, const std::string& fileName): void
      - {static} inline imgExtension: std::string
    }
  }
}

' サブシステム、配置エリアA撮影システム
package "配置エリアA撮影システム" {
  package "配置エリアA攻略部" {
    ' ミニフィグカメラアクション
    class MiniFigCameraAction {
      + run(): void
      - isClockwise: bool
      - preTargetAngle: int
      - postTargetAngle: int
      - targetRotationSpeed: double
      - backTargetDistance: double
      - forwardTargetDistance: double
      - backSpeed: double
      - forwardSpeed: double
      - position: int
      - {static} constexpr filePath: const char*
      - {static} constexpr uploadFileName: const char*
      - isMetPreCondition(): bool
      - detectDirection(cv::Mat& frame): void
    }
  }

  package "ミニフィグ向き判定部" {
    ' ミニフィグ向き判定クラス
    class MiniFigDirectionDetector {
      + detect(const cv::Mat& frame, MiniFigDirectionResult& result): void
      - net: cv::dnn::Net
      - modelPath: std::string
      - outputImagePath: std::string
      - preprocess(const cv::Mat& frame, float scale, int padX, int padY): cv::Mat
      - postprocess(const std::vector<cv::Mat>& outputs, const cv::Mat& frame, float scale, int padX, int padY, MiniFigDirectionResult& result): void
    }
  }
}

' サブシステム、配置エリアB撮影システム
package "配置エリアB撮影システム" {
  package "配置エリアB攻略部" {
    ' 風景プラレールカメラアクション
    class BackgroundPlaCameraAction {
      + run(): void
      - isClockwise: bool
      - preTargetAngle: int
      - postTargetAngle: int
      - targetRotationSpeed: double
      - threshold: double
      - minArea: double
      - position: int
      - roi: cv::Rect
      - isMetPreCondition(): bool
      - detectDirection(cv::Mat& frame): void
    }
  }

  package "動体検出部" {
    ' 動体検出クラス
    class MotionDetector {
      + setBackground(const cv::Mat& background): bool
      + detect(const cv::Mat& frame, BoundingBoxDetectionResult& result): void
      + compareTwoFrames(const cv::Mat& firstFrame, const cv::Mat& secondFrame): std::vector<cv::Point>
      - threshold: double
      - minArea: double
      - roi: cv::Rect
      - bgFrame: cv::Mat
    }

    ' プラレールカメラアクション
    class PlaCameraAction {
      + run(): void
      + setImageSaveName(const std::string& fileName): void
      - getBackgroundFrame(): void
      - motionDetector: MotionDetector
      - imageSaveName: std::string
      - {static} constexpr MAX_NO_MOTION: int
      - {static} constexpr filePath: const char*
    }

    ' 画像処理系
    ' カメラライントレースが出てくるなら、カメラ撮影部へ移動
    struct BoundingBoxDetectionResult {
      + wasDetected: bool
      + topLeft: cv::Point
      + topRight: cv::Point
      + bottomLeft: cv::Point
      + bottomRight: cv::Point
    }

    abstract class BoundingBoxDetector {
      + {abstract} detect(const cv::Mat& frame, BoundingBoxDetectionResult& result): void
    }

    class LineBoundingBoxDetector {
      + detect(const cv::Mat& frame, BoundingBoxDetectionResult& result): void
      - {static} MIN_LINE_CONTOUR_AREA: double
      - lowerHSV: cv::Scalar
      - upperHSV: cv::Scalar
      - roi: cv::Rect
      - resolution: cv::Size
      - validateParameters(): void
    }
  }

  package "風景向き判定部" {
    ' 風景向き判定クラス
    class BackgroundDirectionDetector {
      + detect(const cv::Mat& frame, BackgroundDirectionResult& result): void
      - net: cv::dnn::Net
      - modelPath: std::string
      - outputImagePath: std::string
      - preprocess(const cv::Mat& frame, float scale, int padX, int padY): cv::Mat
      - postprocess(const std::vector<cv::Mat>& outputs, const cv::Mat& frame, float scale, int padX, int padY, BackgroundDirectionResult& result): void
    }
  }
}

' サブシステム、ユーティリティシステム
package "ユーティリティシステム" {
  package "コマンド実行部" {
    ' シェルコマンド実行クラス
    class CommandExecutor {
      + {static} exec(const std::string& command): int
    }
  }
}

' サブシステム、走行体・無線通信デバイス間通信システム
package "走行体・無線通信デバイス間通信システム" {
  ' 走行体から無線通信デバイスへの画像アップロードクラス
  class ImageUploader {
    + {static} uploadImage(const std::string& imagePath, int maxAttempts): bool
  }
}

' サブシステム、画像アップロードシステム
package "画像アップロードシステム" {
  ' 別リポジトリの etrobocon2025-comm-device-system を参照
  ' 無線通信デバイスから競技システムへの画像アップロードクラス
  class OfficialInterface {
    + uploadSnap (std::string imagePath): bool
  }
}



' 関係性の定義


' 1. 継承関係 (Inheritance)
LineTrace --|> Motion : 継承
Straight --|> Motion : 継承
Rotation --|> Motion : 継承
' CameraPidTracking --|> Motion : 継承
CompositeMotion --|> Motion : 継承

DistanceLineTrace --|> LineTrace : 継承
ColorLineTrace --|> LineTrace : 継承
ColorDistanceLineTrace --|> LineTrace : 継承

DistanceStraight --|> Straight : 継承
ColorStraight --|> Straight : 継承

AngleRotation --|> Rotation : 継承

' DistanceCameraLineTrace --|> CameraPidTracking : 継承
' ColorDistanceCameraLineTrace --|> CameraPidTracking : 継承

MiniFigCameraAction --|> CompositeMotion : 継承
BackgroundPlaCameraAction --|> CompositeMotion : 継承
' CameraRecoveryAction --|> CompositeMotion : 継承

EdgeChange --|> Motion : 継承
Sleeping --|> Motion : 継承
' Snapshot --|> Motion : 継承
' 実際に継承してるが、モデル上ではあまり必要性がないため継承していないことにする
' PlaCameraAction --|> Motion : 継承

LineBoundingBoxDetector --|> BoundingBoxDetector : 継承
MotionDetector --|> BoundingBoxDetector : 継承

' 2. 実現関係 (Realization)
CameraCapture ..|> ICameraCapture : 実現

' 3. コンポジション関係 (Composition) - 強い所有関係
EtRobocon2025 *-- Robot : コンポジション
Robot *-- MotorController : コンポジション
Robot *-- CameraCapture : コンポジション
Robot *-- "spikeapi::ColorSensor" : コンポジション
Robot *-- "spikeapi::Clock" : コンポジション
Robot *-- "spikeapi::Button" : コンポジション
Robot *-- "spikeapi::ForceSensor" : コンポジション
Robot *-- "spikeapi::Display" : コンポジション
Robot *-- BackgroundDirectionResult : コンポジション
Robot *-- MiniFigDirectionResult : コンポジション

MotorController *-- "spikeapi::Motor" : コンポジション

Pid *-- PidGain : コンポジション

SpeedCalculator *-- Pid : コンポジション

PlaCameraAction *-- MotionDetector : コンポジション

ColorJudge *-- COLOR : コンポジション

' 4. 集約関係 (Aggregation) - 弱い所有関係
Robot o-- ICameraCapture : 集約
' CameraPidTracking o-- BoundingBoxDetector : 集約
' DistanceCameraLineTrace o-- BoundingBoxDetector : 集約

' 5. 関連関係 (Association) - 永続的な関係
AreaMaster --> Robot : 関連
Calibrator --> Robot : 関連
Motion --> Robot : 関連

' 6. 依存関係 (Dependency) - 一時的な使用関係
AreaMaster ..> MotionParser : 依存
AreaMaster ..> Area : 依存

MotionParser ..> Motion : 依存
MotionParser ..> COMMAND : 依存
MotionParser ..> ColorLineTrace : 依存
MotionParser ..> DistanceLineTrace : 依存
MotionParser ..> ColorDistanceLineTrace : 依存
MotionParser ..> DistanceStraight : 依存
MotionParser ..> ColorStraight : 依存
MotionParser ..> AngleRotation : 依存
' MotionParser ..> DistanceCameraLineTrace : 依存
' MotionParser ..> ColorDistanceCameraLineTrace : 依存
MotionParser ..> EdgeChange : 依存
MotionParser ..> Sleeping : 依存
' MotionParser ..> Snapshot : 依存
MotionParser ..> MiniFigCameraAction : 依存
MotionParser ..> BackgroundPlaCameraAction : 依存
' MotionParser ..> CameraRecoveryAction : 依存
MotionParser ..> StringOperator : 依存

LineTrace ..> PidGain : 依存
LineTrace ..> ColorJudge : 依存
LineTrace ..> Mileage : 依存
LineTrace ..> SpeedCalculator : 依存

Straight ..> SpeedCalculator : 依存

AngleRotation ..> Mileage : 依存
AngleRotation ..> SystemInfo : 依存

Mileage ..> SystemInfo : 依存
MotorController ..> SystemInfo : 依存
SpeedCalculator ..> SystemInfo : 依存
LineBoundingBoxDetector ..> SystemInfo : 依存
PlaCameraAction ..> SystemInfo : 依存
MiniFigCameraAction ..> SystemInfo : 依存

ColorLineTrace ..> COLOR : 依存
ColorStraight ..> COLOR : 依存
ColorStraight ..> ColorJudge : 依存
ColorDistanceLineTrace ..> COLOR : 依存

' Robot -> Motion -> EdgeChange と関係があるので、Robot - EdgeChange 間の直接的な依存関係はいったん書かないことに
' EdgeChange ..> Robot : 依存

BoundingBoxDetector ..> BoundingBoxDetectionResult : 依存
LineBoundingBoxDetector ..> BoundingBoxDetectionResult : 依存
MotionDetector ..> BoundingBoxDetectionResult : 依存
' CameraPidTracking ..> PidGain : 依存
' CameraPidTracking ..> BoundingBoxDetectionResult : 依存

BackgroundDirectionDetector ..> BackgroundDirectionResult : 依存
BackgroundDirectionDetector ..> BackgroundDirection : 依存

MiniFigDirectionDetector ..> MiniFigDirectionResult : 依存
MiniFigDirectionDetector ..> MiniFigDirection : 依存



' 構造体と列挙型の関係
MiniFigDirectionResult ..> MiniFigDirection : 依存
BackgroundDirectionResult ..> BackgroundDirection : 依存

MiniFigCameraAction ..> FrameSave : 依存
MiniFigCameraAction ..> MiniFigDirectionDetector : 依存
MiniFigCameraAction ..> AngleRotation : 依存
MiniFigCameraAction ..> DistanceStraight : 依存
' Snapshot ..> FrameSave : 依存
PlaCameraAction ..> FrameSave : 依存
MotionDetector ..> FrameSave : 依存
BackgroundPlaCameraAction ..> BackgroundDirectionDetector : 依存
BackgroundPlaCameraAction ..> PlaCameraAction : 依存
BackgroundPlaCameraAction ..> AngleRotation : 依存
MiniFigCameraAction ..> ImageUploader : 依存
BackgroundPlaCameraAction ..> ImageUploader : 依存
' CameraRecoveryAction ..> BoundingBoxDetector : 依存
' CameraRecoveryAction ..> BoundingBoxDetectionResult : 依存
ImageUploader ..> CommandExecutor : 依存


@enduml

@startuml etrobocon2025-japanese-class-diagram
!pragma useVerticalIf on

' レイアウト調整
skinparam linetype ortho
skinparam nodesep 50
skinparam ranksep 50
skinparam minClassWidth 100
skinparam maxMessageSize 150
skinparam maxBoxSize 150
skinparam svgMaxWidth 10000
skinparam svgMaxHeight 6000
skinparam defaultFontSize 10
skinparam classFontSize 9
skinparam packageFontSize 10

' 配置指示
!define LAYOUT_TOP_TO_BOTTOM_DIRECTION top to bottom direction

' サブシステム、走行システム
package "走行システム" {
  ' 走行システムを構成する細かなサブシステムの1つ、走行制御システム
  package "走行制御システム" {
    ' 走行システムのうち、走行制御システムを構成するパッケージの1つ、走行計画部
    package "走行計画部" {
      ' コマンドの列挙型
      enum コマンド {
        AR
        DS
        CS
        DL
        DCL
        ' CDCL
        CL
        CDL
        EC
        SL
        SS
        MCA
        BCA
        CRA
        ' NONE
      }

      ' 攻略エリアの列挙型
      enum 攻略エリア {
        ライントレースエリア
        ダブルループエリア
        スマートキャリーエリア
      }

      ' メインクラス
      class ETロボコン2025 {
        + {static} 競技攻略を開始する(): void
        - {static} ロボット: Robot
      }

      ' 攻略システムクラス
      class 攻略システム {
        + 攻略する(): void
        - 攻略するエリア: 攻略エリア
        - 走行するコース: bool
        - 目標輝度: int
        - {static} const ベースパス: std::string
        - {static} const エリアコマンド名: std::array<std::string, 3>
      }

      ' キャリブレータクラス
      class キャリブレーション {
        + 走行するコースを設定する(): void
        + 目標輝度を測定し設定する(): void
        + カメラ角度調整用のフレームを取得する(): void
        + スタート合図が出るまで待機にする(): void
        + 走行するコースを取得する(): bool
        + 目標輝度を取得する(): int
        - 走行するコース: bool
        - 目標輝度: int
      }

      ' モーションパーサークラス
      class コマンド解析 {
        + {static} 動作リストを生成する(Robot& ロボット, std::string& コマンドファイルパス, int 目標輝度): std::vector<Motion*>
        - {static} コマンドに変換する(const std::string& 文字列): コマンド
        - {static} 真偽値を変換する(const std::string& コマンド, const std::string& 文字列パラメータ): bool
      }

      ' 文字列操作クラス
      class 文字列操作 {
        + {static} 改行文字を削除する(const std::string& 文字列): std::string
      }
    }

    ' 走行システムのうち、走行制御システムを構成するパッケージの1つ、計算部
    package "計算部" {
      ' PIDゲイン
      struct PIDゲイン {
        + 比例ゲイン: double
        + 積分ゲイン: double
        + 微分ゲイン: double
      }

      ' 色の列挙型
      enum 色 {
        なし
        黒
        白
        青
        緑
        黄
        赤
      }

      ' PID制御クラス
      class PID制御 {
        + PIDゲインを設定する(double 比例, double 積分, double 微分): void
        + PID計算を実行する(double 現在値, double デルタ): double
        - PIDゲイン: PIDゲイン
        - 前回PID計算時の偏差: double
        - 積分値: double
        - フィルタ微分: double
        - 目標値: double
        - 積分最大値: double
        - 積分最小値: double
        - {static} constexpr アルファ: double
      }

      ' 色識別クラス
      class 色識別 {
        + {static} 文字列から色構造体へ変換する(const std::string& 文字列): 色
        + {static} 色構造体から文字列へ変換する(const 色& 色): const char*
        + {static} HSVから色構造体へ変換する(const spikeapi::ColorSensor::HSV& hsv): 色
      }

      ' 走行距離計算クラス
      class 走行距離計算 {
        + {static} 車輪の回転距離を計算する(int32_t 車輪の回転角度): double
        + {static} 走行距離を計算する(int32_t 右車輪の回転角度, int32_t 左車輪の回転角度): double
      }

      ' 速度計算クラス
      class 速度制御 {
        + 右モーターのpower値を計算する(): double
        + 左モーターのpower値を計算する(): double
        - const 目標速度: double
        - 右モーターのPIDインスタンス: PID制御
        - 左モーターのPIDインスタンス: PID制御
        - 右モーターのpower値: double
        - 左モーターのpower値: double
        - 右モーターで前回PID計算をした時刻: double
        - 左モーターで前回PID計算をした時刻: double
        - {static} constexpr 右モーターの比例ゲイン: double
        - {static} constexpr 右モーターの積分ゲイン: double
        - {static} constexpr 右モーターの微分ゲイン: double
        - {static} constexpr 左モーターの比例ゲイン: double
        - {static} constexpr 左モーターの積分ゲイン: double
        - {static} constexpr 左モーターの微分ゲイン: double
      }
    }

    ' 走行システムのうち、走行制御システムを構成するパッケージの1つ、基本動作部
    package "基本動作部" {
      ' Motionクラス
      abstract class 動作 {
        + 動作コンストラクタ(Robot& ロボット)
        + {abstract} 動作を実行する(): void
        # ロボット: Robot&
      }

      ' ライントレースクラス
      abstract class ライントレース {
        + 動作を実行する(): void
        # {abstract} 事前条件を判定する(): bool
        # {abstract} 事前準備をする(): void
        # {abstract} 継続条件を判定する(): bool
        # 目標速度: double
        # 目標輝度: int
        # PIDゲイン: PIDゲイン
      }

      ' 直進クラス
      abstract class 直進 {
        + 動作を実行する(): void
        # {abstract} 事前条件を判定する(): bool
        # {abstract} 事前準備をする(): void
        # {abstract} 継続条件を判定する(): bool
        # 目標速度: double
      }

      ' 回頭クラス
      abstract class 回頭 {
        + 動作を実行する(): void
        + {abstract} 事前条件を判定する(): bool
        + {abstract} 事前準備をする(): void
        + {abstract} 継続条件を判定する(): bool
        # 速度: double
        # 回頭方向: bool
        # 左モーターの回転方向: int
        # 右モーターの回転方向: int
      }

      ' 色指定ライントレースクラス
      class 色指定ライントレース {
        + 動作を実行する(): void
        # 事前条件を判定する(): bool
        # 事前準備をする(): void
        # 指定色を検出するまで継続判定をする(): bool
        - 色を取得した回数: int
        - 目標色: 色
        - {static} constexpr 指定色を取得したとみなす判定回数: int
      }

      ' 距離指定ライントレースクラス
      class 距離指定ライントレース {
        + 動作を実行する(): void
        # 事前条件を判定する(): bool
        # 事前準備をする(): void
        # 指定距離を走行するまで継続判定をする(): bool
        - 目標距離: double
        - 初期距離: double
      }

      ' 色距離指定ライントレースクラス
      class 色距離指定ライントレース {
        + 動作を実行する(): void
        # 事前条件を判定する(): bool
        # 事前準備をする(): void
        # 指定色または指定距離を走行するまで継続判定をする(): bool
        - 色を取得した回数: int
        - 目標色: 色
        - 目標距離: double
        - 初期距離: double
        - {static} constexpr 指定色を取得したとみなす判定回数: int
      }

      ' 距離指定直進クラス
      class 距離指定直進 {
        + 動作を実行する(): void
        # 事前条件を判定する(): bool
        # 事前準備をする(): void
        # 指定距離まで継続判定をする(): bool
        - 目標距離: double
        - 初期距離: double
      }

      ' 色指定直進クラス
      class 色指定直進 {
        + 動作を実行する(): void
        # 事前条件を判定する(): bool
        # 事前準備をする(): void
        # 指定色を検出するまで継続判定をする(): bool
        - 色を取得した回数: int
        - 目標色: 色
        - {static} constexpr 判定回数: int
      }

      ' 角度指定回頭クラス
      class 角度指定回頭 {
        + 動作を実行する(): void
        # 事前準備をする(): void
        # 事前条件を判定する(): bool
        # 指定角度まで継続判定をする(): bool
        - 左車輪の目標距離: double
        - 右車輪の目標距離: double
        - 目標角度: int
      }

      ' カメラ走行系、地区大会のモデルでは書かない予定

      ' ' カメラPID監視クラス
      ' abstract class カメラPID追跡 {
      '   + 動作を実行する(): void
      '   # {abstract} 事前条件を判定する(): bool
      '   # {abstract} 事前準備をする(): void
      '   # {abstract} 継続条件を判定する(): bool
      '   # バウンディングボックス検出: バウンディングボックス検出&
      '   # 検出結果: バウンディングボックス検出結果
      '   # 目標速度: double
      '   # 目標X座標: int
      '   # PIDゲイン: PIDゲイン
      ' }

      ' ' 距離指定カメラライントレースクラス
      ' class 距離指定カメラライントレース {
      '   + 動作を実行する(): void
      '   # 事前条件を判定する(): bool
      '   # 事前準備をする(): void
      '   # 継続条件を判定する(): bool
      '   - 目標距離: double
      '   - 初期距離: double
      '   - バウンディングボックス検出: std::unique_ptr<バウンディングボックス検出>
      ' }

      ' ' 色距離指定カメラライントレースクラス
      ' class 色距離指定カメラライントレース {
      '   + 動作を実行する(): void
      '   # 事前条件を判定する(): bool
      '   # 事前準備をする(): void
      '   # 継続条件を判定する(): bool
      '   - {static} constexpr 判定回数: int
      '   - 色カウント: int
      '   - 目標色: 色
      '   - 目標距離: double
      '   - 初期距離: double
      '   - バウンディングボックス検出: std::unique_ptr<バウンディングボックス検出>
      ' }

      ' ' カメラフレーム復帰クラス
      ' class カメラ復帰動作 {
      '   + 動作を実行する(): void
      '   - バウンディングボックス検出: std::unique_ptr<バウンディングボックス検出>
      '   - 検出結果: バウンディングボックス検出結果
      '   - 復帰角度: int
      '   - 速度: double
      '   - 回頭方向: bool
      '   - {static} constexpr フレーム数: int
      ' }

      ' エッジ変更クラス
      class エッジ変更 {
        + 動作を実行する(): void
        - エッジ: bool
      }

      ' スリープクラス
      class スリープ {
        + 動作を実行する(): void
        - ミリ秒: int
      }
    }

    ' 走行システムのうち、走行制御システムを構成するパッケージの1つ、複合動作部
    package "複合動作部" {
      ' 複合動作クラス
      abstract class 複合動作 {
        + 複合動作コンストラクタ(Robot& ロボット)
        + {abstract} 動作を実行する(): void
      }

      ' ミニフィグカメラアクション
      class ミニフィグカメラ動作 {
        + ミニフィグ撮影動作を実行する(): void
        - 回頭方向: bool
        - 前目標角度: int
        - 後目標角度: int
        - 目標回転速度: double
        - 後進目標距離: double
        - 前進目標距離: double
        - 後進速度: double
        - 前進速度: double
        - ミニフィグを撮影する位置: int
        - {static} constexpr ファイルパス: const char*
        - {static} constexpr アップロードファイル名: const char*
        - 事前条件を判定する(): bool
        - ミニフィグの向きを取得する(cv::Mat& フレーム): void
      }

      ' 風景プラレールカメラアクション
      class 風景プラレールカメラ動作 {
        + 風景プラレール撮影動作を実行する(): void
        - 回頭方向: bool
        - 前目標角度: int
        - 後目標角度: int
        - 目標回転速度: double
        - 閾値: double
        - 動体とみなす輪郭の最小面積: double
        - 風景プラレールを撮影する位置: int
        - 関心領域: cv::Rect
        - 事前条件を判定する(): bool
        - 風景方向を取得する(cv::Mat& フレーム): void
      }

      ' プラレールカメラアクション
      class プラレールカメラ動作 {
        + 動作を実行する(): void
        + 保存する画像のファイル名を設定する(const std::string& ファイル名): void
        + 保存する画像のファイルパスを取得する() const: const char*
        + 保存する画像のファイル名を取得する() const: const std::string&
        - 風景フレームを取得する(): void
        - {static} constexpr 非検知とする検知回数: int
        - {static} constexpr ファイルパス: const char*
        - 保存する画像のファイル名: std::string
      }
    }
  }

  ' 走行システムを構成する細かなサブシステムの1つ、走行体情報管理システム
  package "走行体情報管理システム" {
    ' 走行体情報管理システムを構成するパッケージの1つ、走行体情報部
    package "走行体情報部" {
      ' ミニフィグの向き判定結果
      struct ミニフィグの向き判定結果 {
        + 判定成否: bool
        + 方向: ミニフィグの向き
      }

      ' ミニフィグの向きの列挙型
      enum ミニフィグの向き {
        前方
        右方
        後方
        左方
      }

      ' 風景方向判定結果
      struct 風景方向判定結果 {
        + 判定成否: bool
        + 方向: 風景方向
      }

      ' 風景方向の列挙型
      enum 風景方向 {
        前方
        右方
        後方
        左方
      }

      ' システム定数
      class システム情報 <<constants>> {
        + {static} 円周率: double
        + {static} ラジアンから度へ変換する係数: double
        + {static} 度からラジアンへ変換する係数: double
        + {static} constexpr 車軸幅: double
        + {static} constexpr 車輪半径: double
        + {static} constexpr 規定のカメラ解像度の幅: int
        + {static} constexpr 規定のカメラ解像度の高さ: int
        + {static} constexpr 最小のカメラ解像度の幅: int
        + {static} constexpr 最小のカメラ解像度の高さ: int
        + {static} constexpr 最大のカメラ解像度の幅: int
        + {static} constexpr 最大のカメラ解像度の高さ: int
      }

      ' ロボットクラス
      ' 風景方向判定結果 は実装予定の変数と関係を記述している
      class ロボット {
        + ロボットコンストラクタ()
        + ロボットコンストラクタ(カメラキャプチャインターフェース& cam)
        + モーター制御インスタンスを取得する(): モーター制御&
        + カメラキャプチャインスタンスを取得する(): カメラキャプチャインターフェース&
        + カラーセンサーインスタンスを取得する(): spikeapi::ColorSensor&
        + クロックインスタンスを取得する(): spikeapi::Clock&
        + ボタンインスタンスを取得する(): spikeapi::Button&
        + フォースセンサーインスタンスを取得する(): spikeapi::ForceSensor&
        + ディスプレイインスタンスを取得する(): spikeapi::Display&
        + エッジを設定する(bool エッジ): void
        + エッジを取得する() const: bool
        + ミニフィグの向きの判定結果を取得する(): ミニフィグの向き判定結果&
        + 風景方向の判定結果を取得する(): 風景方向判定結果&
        - モーター制御のインスタンス: モーター制御
        - デフォルトカメラキャプチャのインスタンス: カメラキャプチャ
        - カメラキャプチャインターフェース: カメラキャプチャインターフェース&
        - カラーセンサーのインスタンス: spikeapi::ColorSensor
        - クロックのインスタンス: spikeapi::Clock
        - ボタンのインスタンス: spikeapi::Button
        - フォースセンサーのインスタンス: spikeapi::ForceSensor
        - ディスプレイのインスタンス: spikeapi::Display
        - ミニフィグの向きの判定結果: ミニフィグの向き判定結果
        - 風景方向の判定結果: 風景方向判定結果
        - エッジ: bool
      }
    }

    ' 走行体情報管理システムを構成するパッケージの1つ、SPIKE API ラッパー
    package "SPIKE API ラッパー" {
      ' モーター制御クラス
      class モーター制御 {
        + {static} constexpr power値の上限値: int
        + {static} constexpr power値の下限値: int
        + 右モーターのpower値を設定する(int power値): void
        + 左モーターのpower値を設定する(int power値): void
        + 右モーターのpower値をリセットする(): void
        + 左モーターのpower値をリセットする(): void
        + 左右のモーターのpower値をリセットする(): void
        + 右モーターの速度を設定する(double 速度): void
        + 左モーターの速度を設定する(double 速度): void
        + 左右のモーターを停止する(): void
        + ブレーキをかけて左右のモーターを停止する(): void
        + アームモーターのpower値を設定する(int power値): void
        + アームモーターのpower値をリセットする(): void
        + アームモーターを停止する(): void
        + アームモーターを止めて角度を保持する(): void
        + 右モーターの回転数を取得する(): int32_t
        + 左モーターの回転数を取得する(): int32_t
        + アームモーターの回転数を取得する(): int32_t
        + 右モーターのpower値を取得する(): int
        + 左モーターのpower値を取得する(): int
        + アームモーターのpower値を取得する(): int
        + 右モーターの速度を取得する(): double
        + 左モーターの速度を取得する(): double
        - 右モーターのインスタンス: spikeapi::Motor
        - 左モーターのインスタンス: spikeapi::Motor
        - アームモーターのインスタンス: spikeapi::Motor
        - 左右のモーターに入力するpower値を制限する(int power値): int
      }
    }
  }
}

' サブシステム、撮影システム
package "撮影システム" {
  ' 撮影システムを構成するパッケージの1つ、配置エリアA撮影部
  package "配置エリアA撮影部" {
    ' ミニフィグ向き判定クラス
    class ミニフィグの向き検出 {
      + ミニフィグの向きを検出する(const cv::Mat& フレーム, ミニフィグの向き判定結果& 結果): void
      - ネットワーク: cv::dnn::Net
      - モデルパス: std::string
      - 出力画像パス: std::string
      - 前処理をする(const cv::Mat& フレーム, float スケール係数, int X方向のパディング量, int Y方向のパディング量): cv::Mat
      - 後処理をする(const std::vector<cv::Mat>& 出力, const cv::Mat& フレーム, float スケール係数, int X方向のパディング量, int Y方向のパディング量, ミニフィグの向き判定結果& 結果): void
    }
  }

  ' 撮影システムを構成するパッケージの1つ、配置エリアB撮影部
  package "配置エリアB撮影部" {
    ' 動体検出クラス
    class 動体検出 {
      + 風景を設定する(const cv::Mat& 風景): bool
      + 動体を検出する(const cv::Mat& フレーム, バウンディングボックス検出結果& 結果): void
      + 2枚のフレームを比較する(const cv::Mat& 第1フレーム, const cv::Mat& 第2フレーム): std::vector<cv::Point>
      - 閾値: double
      - 動体とみなす輪郭の最小面積: double
      - 関心領域: cv::Rect
      - 風景フレーム: cv::Mat
    }

    ' 画像処理系
    struct バウンディングボックス検出結果 {
      + 検出結果: bool
      + 左上: cv::Point
      + 右上: cv::Point
      + 左下: cv::Point
      + 右下: cv::Point
    }

    abstract class バウンディングボックス検出 {
      + {abstract} 境界のバウンディングボックスを検出する(const cv::Mat& フレーム, バウンディングボックス検出結果& 結果): void
    }

    class ラインバウンディングボックス検出 {
      + ラインのバウンディングボックスを検出する(const cv::Mat& フレーム, バウンディングボックス検出結果& 結果): void
      - {static} ラインとみなす輪郭の最小面積: double
      - 下位HSV: cv::Scalar
      - 上位HSV: cv::Scalar
      - 関心領域: cv::Rect
      - 解像度: cv::Size
      - パラメータを検証する(): void
    }

    ' 風景向き判定クラス
    class 風景方向検出 {
      + 風景方向を検出する(const cv::Mat& フレーム, 風景方向判定結果& 結果): void
      - ネットワーク: cv::dnn::Net
      - モデルパス: std::string
      - 出力画像パス: std::string
      - 前処理をする(const cv::Mat& フレーム, float スケール係数, int X方向のパディング量, int Y方向のパディング量): cv::Mat
      - 後処理をする(const std::vector<cv::Mat>& ネットワークの出力結果, const cv::Mat& フレーム, float スケール係数, int X方向のパディング量, int Y方向のパディング量, 風景方向判定結果& 結果): void
    }
  }

' 撮影システムを構成するパッケージの1つ、USBカメラインターフェース
  package "USBカメラインターフェース" {
    ' カメラキャプチャーインターフェース
    abstract class カメラキャプチャインターフェース {
      + {abstract} 利用可能なカメラIDを検索する(int 最大テスト数): int
      + {abstract} カメラIDを取得する(): int
      + {abstract} カメラIDを設定する(int ID): bool
      + {abstract} カメラを開放する(): bool
      + {abstract} 撮影プロパティを設定する(double 幅, double 高さ): void
      + {abstract} フレームを取得する(cv::Mat& 出力フレーム): bool
    }

    ' カメラキャプチャークラス
    class カメラキャプチャ {
      + 利用可能カメラIDを検索する(int 最大テスト数): int
      + カメラIDを取得する(): int
      + カメラIDを設定する(int ID): bool
      + カメラを開放する(): bool
      + 撮影プロパティを設定する(double 幅, double 高さ): void
      + フレームを取得する(cv::Mat& 出力フレーム): bool
      - カメラID: int
    }

    ' フレーム保存クラス
    class フレーム保存 {
      + {static} 画像を保存する(cv::Mat& フレーム, const std::string& ファイルパス, const std::string& ファイル名): void
      - {static} inline 画像拡張子: std::string
    }
  }
}

' サブシステム、ユーティリティシステム
package "ユーティリティシステム" {
  package "コマンド実行部" {
    ' シェルコマンド実行クラス
    class コマンド実行器 {
      + {static} コマンドを実行する(const std::string& command): int
    }
  }
}

' サブシステム、走行体・無線通信デバイス間通信システム
package "走行体・無線通信デバイス間通信システム" {
  ' 走行体から無線通信デバイスへの画像アップロードクラス
  class 無線通信デバイス間通信 {
    + {static} 走行体から無線通信デバイスへ画像をアップロードする(const std::string& ファイル名, int 通信試行回数): bool
  }
}

' サブシステム、画像アップロードシステム
package "画像アップロードシステム" {
  ' 別リポジトリの etrobocon2025-comm-device-system を参照
  ' 無線通信デバイスから競技システムへの画像アップロードクラス
  class 競技システム間通信 {
    + 無線通信デバイスから競技システムへ画像をアップロードする(std::string imagePath): bool
  }
}

' 関係性の定義（同じ内容なので変更なし）

' 1. 継承関係 (Inheritance)
ライントレース --|> 動作 : 継承
直進 --|> 動作 : 継承
回頭 --|> 動作 : 継承
複合動作 --|> 動作 : 継承

距離指定ライントレース --|> ライントレース : 継承
色指定ライントレース --|> ライントレース : 継承
色距離指定ライントレース --|> ライントレース : 継承

距離指定直進 --|> 直進 : 継承
色指定直進 --|> 直進 : 継承

角度指定回頭 --|> 回頭 : 継承

' 距離指定カメラライントレース --|> カメラPID追跡 : 継承
' 色距離指定カメラライントレース --|> カメラPID追跡 : 継承

ミニフィグカメラ動作 --|> 複合動作 : 継承
風景プラレールカメラ動作 --|> 複合動作 : 継承
' カメラ復帰動作 --|> 複合動作 : 継承

エッジ変更 --|> 動作 : 継承
スリープ --|> 動作 : 継承

ラインバウンディングボックス検出 --|> バウンディングボックス検出 : 継承
動体検出 --|> バウンディングボックス検出 : 継承

' 2. 実現関係 (Realization)
カメラキャプチャ ..|> カメラキャプチャインターフェース : 実現

' 3. コンポジション関係 (Composition) - 強い所有関係
ETロボコン2025 *-- "1" ロボット : - ロボット
ロボット *-- "1" モーター制御 : - モーターコントローラー
ロボット *-- "1" カメラキャプチャ : - デフォルトカメラキャプチャ
ロボット *-- "1" "spikeapi::ColorSensor" : - カラーセンサー
ロボット *-- "1" "spikeapi::Clock" : - クロック
ロボット *-- "1" "spikeapi::Button" : - ボタン
ロボット *-- "1" "spikeapi::ForceSensor" : - フォースセンサー
ロボット *-- "1" "spikeapi::Display" : - ディスプレイ
ロボット *-- "1" 風景方向判定結果 : - 風景方向の判定結果
ロボット *-- "1" ミニフィグの向き判定結果 : - ミニフィグの向きの判定結果

モーター制御 *-- "3" "spikeapi::Motor" : - 右モーター + 左モーター + アームモーター

PID制御 *-- "1" PIDゲイン : - PIDゲイン

速度制御 *-- "2" PID制御 : - 右モーターのPIDインスタンス + 左モーターのPIDインスタンス

プラレールカメラ動作 *-- "1" 動体検出 : - 動体検出器

色識別 ..> 色 : 依存

' 4. 集約関係 (Aggregation) - 弱い所有関係
' ロボット o-- "1" カメラキャプチャインターフェース : 集約

' 5. 関連関係 (Association) - 永続的な関係
攻略システム "1" -- "1" ロボット : - ロボット
キャリブレーション "1" -- "1" ロボット : - ロボット
動作 "*" -- "1" ロボット : # ロボット
攻略システム "1" -- "0..*" 動作 : + 動作リスト

' 6. 依存関係 (Dependency) - 一時的な使用関係
ETロボコン2025 ..> キャリブレーション : + キャリブレーター
ETロボコン2025 ..> 攻略システム : + ライントレースエリアマスター
ETロボコン2025 ..> 攻略エリア : + ライントレースエリア

攻略システム ..> コマンド解析 : + 動作リストを生成
攻略システム ..> 攻略エリア : - 攻略するエリア

コマンド解析 ..> 動作 : + 動作インスタンス
コマンド解析 ..> コマンド : - コマンドに変換
コマンド解析 ..> 色識別 : + 文字列から色構造体へ変換
コマンド解析 ..> 色指定ライントレース : + CLコマンド
コマンド解析 ..> 距離指定ライントレース : + DLコマンド
コマンド解析 ..> 色距離指定ライントレース : + CDLコマンド
コマンド解析 ..> 距離指定直進 : + DSコマンド
コマンド解析 ..> 色指定直進 : + CSコマンド
コマンド解析 ..> 角度指定回頭 : + ARコマンド
コマンド解析 ..> エッジ変更 : + ECコマンド
コマンド解析 ..> スリープ : + SLコマンド
' コマンド解析 ..> 距離指定カメラライントレース : 依存
' コマンド解析 ..> 色距離指定カメラライントレース : 依存
コマンド解析 ..> ミニフィグカメラ動作 : + MCAコマンド
コマンド解析 ..> 風景プラレールカメラ動作 : + BCAコマンド
' コマンド解析 ..> カメラ復帰動作 : + CRAコマンド
コマンド解析 ..> 文字列操作 : + 改行文字を削除

ライントレース ..> PIDゲイン : # PIDゲイン
ライントレース ..> 色識別 : + HSVから色構造体へ変換
ライントレース ..> 速度制御 : + 速度制御

直進 ..> 速度制御 : + 速度制御
距離指定直進 ..> 走行距離計算 : + 走行距離を計算

角度指定回頭 ..> 走行距離計算 : + 車輪の回転距離を計算
角度指定回頭 ..> システム情報 : + 車軸幅

走行距離計算 ..> システム情報 : + 車輪半径
モーター制御 ..> システム情報 : - power値の制限
速度制御 ..> ロボット : + モーターのpower値を計算
速度制御 ..> システム情報 : + 時間計算
ラインバウンディングボックス検出 ..> システム情報 : + カメラ解像度
プラレールカメラ動作 ..> システム情報 : + ファイルパス
ミニフィグカメラ動作 ..> システム情報 : + ファイルパス

色指定ライントレース ..> 色 : - 目標色
色指定直進 ..> 色 : - 目標色
色指定直進 ..> 色識別 : + HSVから色構造体へ変換
距離指定ライントレース ..> 走行距離計算 : + 走行距離を計算
色指定ライントレース ..> 色識別 : + HSVから色構造体へ変換
色距離指定ライントレース ..> 色 : - 目標色
色距離指定ライントレース ..> 色識別 : + HSVから色構造体へ変換
色距離指定ライントレース ..> 走行距離計算 : + 走行距離を計算

バウンディングボックス検出 ..> バウンディングボックス検出結果 : + 境界のバウンディングボックスを検出
ラインバウンディングボックス検出 ..> バウンディングボックス検出結果 : + ラインのバウンディングボックスを検出
動体検出 ..> バウンディングボックス検出結果 : + 動体を検出

風景方向検出 ..> 風景方向判定結果 : + 風景方向を検出
風景方向検出 ..> 風景方向 : + 方向

ミニフィグの向き検出 ..> ミニフィグの向き判定結果 : + ミニフィグの向きを検出
ミニフィグの向き検出 ..> ミニフィグの向き : + 方向

' 構造体と列挙型の関係
ミニフィグの向き判定結果 ..> ミニフィグの向き : + 方向
風景方向判定結果 ..> 風景方向 : + 方向

ミニフィグカメラ動作 ..> フレーム保存 : + 画像を保存
ミニフィグカメラ動作 ..> ミニフィグの向き検出 : - ミニフィグの向きを取得
ミニフィグカメラ動作 ..> 角度指定回頭 : + 回頭動作
ミニフィグカメラ動作 ..> 距離指定直進 : + 前進・後退動作
プラレールカメラ動作 ..> フレーム保存 : + 画像を保存
動体検出 ..> フレーム保存 : + 風景フレームを保存
風景プラレールカメラ動作 ..> 風景方向検出 : - 風景方向を取得
風景プラレールカメラ動作 ..> プラレールカメラ動作 : + 撮影動作
風景プラレールカメラ動作 ..> 角度指定回頭 : + 回頭動作
ミニフィグカメラ動作 ..> 無線通信デバイス間通信 : + 画像をアップロード
' カメラ復帰動作 ..> カメラキャプチャインターフェース : 依存
' カメラPID追跡 ..> カメラキャプチャインターフェース : 依存
フレーム保存 ..> カメラキャプチャ : + フレームを取得
風景プラレールカメラ動作 ..> 無線通信デバイス間通信 : + 画像をアップロード
' カメラ復帰動作 ..> バウンディングボックス検出 : + ライン検出
' カメラ復帰動作 ..> バウンディングボックス検出結果 : + 検出結果
無線通信デバイス間通信 ..> コマンド実行器 : + コマンドを実行

@enduml

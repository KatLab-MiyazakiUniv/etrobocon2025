@startuml etrobocon2025-japanese-class-diagram
!pragma useVerticalIf on

' レイアウト調整
skinparam linetype ortho
skinparam nodesep 50
skinparam ranksep 50
skinparam minClassWidth 100
skinparam maxMessageSize 150
skinparam maxBoxSize 150
skinparam svgMaxWidth 10000
skinparam svgMaxHeight 6000
skinparam defaultFontSize 10
skinparam classFontSize 9
skinparam packageFontSize 10

' 配置指示
!define LAYOUT_TOP_TO_BOTTOM_DIRECTION top to bottom direction

' サブシステム、ロボコンスナップ攻略システム
package "ロボコンスナップ攻略システム" {
  package "走行計画部" {
    ' コマンドの列挙型
    enum COMMAND {
      AR
      DS
      CS
      DL
      DCL
      CL
      CDL
      EC
      SL
      SS
      MCA
      BCA
      NONE
    }

    ' 攻略エリアの列挙型
    enum Area {
      LineTrace
      DoubleLoop
      SmartCarry
    }

    ' メインクラス
    class ETロボコン2025 {
      + {static} 競技開始(): void
      - {static} ロボット: Robot
    }

    ' エリアマスタークラス
    class エリアマスター {
      + エリアマスターコンストラクタ(Robot& ロボット, Area エリア, bool 左コース判定, int 目標輝度)
      + エリア攻略実行(): void
      - ロボット: Robot&
      - エリア: Area
      - 左コース判定: bool
      - 目標輝度: int
      - {static} const ベースパス: std::string
      - {static} const エリアコマンド名: std::array<std::string, 3>
    }

    ' キャリブレータクラス
    class キャリブレーター {
      + キャリブレーターコンストラクタ(Robot& ロボット)
      + コース選択設定(): void
      + 目標輝度測定設定(): void
      + 角度確認フレーム取得(): void
      + スタート待機(): void
      + 左コース判定取得(): bool
      + 目標輝度取得(): int
      - ロボット: Robot&
      - 左コース判定: bool
      - 目標輝度: int
    }

    ' モーションパーサークラス
    class 動作解析器 {
      + {static} 動作リスト生成(Robot& ロボット, std::string& コマンドファイルパス, int 目標輝度): std::vector<Motion*>
      - 動作解析器コンストラクタ()
      - {static} コマンド変換(const std::string& 文字列): COMMAND
      - {static} 真偽値変換(const std::string& コマンド, const std::string& 文字列パラメータ): bool
    }

    ' 文字列操作クラス
    class 文字列操作器 {
      + {static} 改行文字削除(const std::string& 文字列): std::string
      - 文字列操作器コンストラクタ()
    }
  }
}

' サブシステム、走行体情報管理システム
package "走行体情報管理システム" {
  package "走行体情報中継部" {
    ' ミニフィグ方向判定結果
    struct ミニフィグ方向判定結果 {
      + 検出済み: bool
      + 方向: ミニフィグ方向
    }

    ' ミニフィグ方向の列挙型
    enum ミニフィグ方向 {
      前方
      右方
      後方
      左方
    }

    ' 背景方向判定結果
    struct 背景方向判定結果 {
      + 検出済み: bool
      + 方向: 背景方向
    }

    ' 背景方向の列挙型
    enum 背景方向 {
      前方
      右方
      後方
      左方
    }

    ' システム定数
    class システム情報 <<constants>> {
      + {static} 円周率: double
      + {static} ラジアンから度変換: double
      + {static} 度からラジアン変換: double
      + {static} constexpr 車軸幅: double
      + {static} constexpr 車輪半径: double
      + {static} constexpr 解像度幅: int
      + {static} constexpr 解像度高さ: int
      + {static} constexpr 最小幅: int
      + {static} constexpr 最小高さ: int
      + {static} constexpr 最大幅: int
      + {static} constexpr 最大高さ: int
    }

    ' ロボットクラス
    ' 背景方向判定結果 は実装予定の変数と関係を記述している
    class ロボット {
      + ロボットコンストラクタ()
      + ロボットコンストラクタ(カメラキャプチャインターフェース& cam)
      + モーターコントローラ取得(): モーターコントローラ&
      + カメラキャプチャ取得(): カメラキャプチャインターフェース&
      + カラーセンサー取得(): spikeapi::ColorSensor&
      + クロック取得(): spikeapi::Clock&
      + ボタン取得(): spikeapi::Button&
      + フォースセンサー取得(): spikeapi::ForceSensor&
      + ディスプレイ取得(): spikeapi::Display&
      + 左エッジ設定(bool 左エッジ判定): void
      + 左エッジ判定取得() const: bool
      + ミニフィグ方向判定結果取得(): ミニフィグ方向判定結果&
      + 背景方向判定結果取得(): 背景方向判定結果&
      - モーターコントローラ: モーターコントローラ
      - デフォルトカメラキャプチャ: カメラキャプチャ
      - カメラキャプチャ: カメラキャプチャインターフェース&
      - カラーセンサー: spikeapi::ColorSensor
      - クロック: spikeapi::Clock
      - ボタン: spikeapi::Button
      - フォースセンサー: spikeapi::ForceSensor
      - ディスプレイ: spikeapi::Display
      - ミニフィグ方向判定結果: ミニフィグ方向判定結果
      - 背景方向判定結果: 背景方向判定結果
      - 左エッジ判定: bool
    }
  }

' サブシステム、SPIKE API ラッパー
  package "SPIKE API ラッパー" {
    ' モーターコントローラークラス
    class モーターコントローラ {
      + {static} constexpr モーター出力最大値: int
      + {static} constexpr モーター出力最小値: int
      + モーターコントローラコンストラクタ()
      + 右モーター出力設定(int 出力): void
      + 左モーター出力設定(int 出力): void
      + 右モーター出力リセット(): void
      + 左モーター出力リセット(): void
      + 車輪モーター出力リセット(): void
      + 右モーター速度設定(double 速度): void
      + 左モーター速度設定(double 速度): void
      + 車輪モーター停止(): void
      + 車輪モーターブレーキ(): void
      + アームモーター出力設定(int 出力): void
      + アームモーター出力リセット(): void
      + アームモーター停止(): void
      + アームモーター保持(): void
      + 右モーター回転数取得(): int32_t
      + 左モーター回転数取得(): int32_t
      + アームモーター回転数取得(): int32_t
      + 右モーター出力取得(): int
      + 左モーター出力取得(): int
      + アームモーター出力取得(): int
      + 右モーター速度取得(): double
      + 左モーター速度取得(): double
      - 右車輪: spikeapi::Motor
      - 左車輪: spikeapi::Motor
      - アームモーター: spikeapi::Motor
      - 出力値制限(int 入力出力): int
    }
  }
}

' サブシステム、走行制御システム
package "走行制御システム" {
  package "計算部" {
    ' PIDゲイン
    struct PIDゲイン {
      + 比例ゲイン: double
      + 積分ゲイン: double
      + 微分ゲイン: double
      + PIDゲインコンストラクタ(double 比例ゲイン, double 積分ゲイン, double 微分ゲイン)
    }

    ' 色の列挙型
    enum 色 {
      なし
      黒
      白
      青
      緑
      黄
      赤
    }

    ' PID制御クラス
    class PID制御 {
      + PID制御コンストラクタ(double 比例ゲイン, double 積分ゲイン, double 微分ゲイン, double 目標値, double 積分最大値, double 積分最小値)
      + PID制御コンストラクタ(double 比例ゲイン, double 積分ゲイン, double 微分ゲイン, double 目標値)
      + PIDゲイン設定(double 比例, double 積分, double 微分): void
      + PID計算実行(double 現在値, double デルタ): double
      - PIDゲイン: PIDゲイン
      - 前回偏差: double
      - 積分値: double
      - フィルタ微分: double
      - 目標値: double
      - 積分最大値: double
      - 積分最小値: double
      - {static} constexpr アルファ: double
    }

    ' 色識別クラス
    class 色判定 {
      + 色判定コンストラクタ()
      + {static} 文字列から色変換(const std::string& 文字列): 色
      + {static} 色から文字列変換(const 色& 色): const char*
      + {static} HSVから色変換(const spikeapi::ColorSensor::HSV& hsv): 色
      - 色判定コンストラクタ()
    }

    ' 走行距離計算クラス
    class 走行距離計算 {
      + {static} 車輪走行距離計算(int32_t 角度): double
      + {static} 走行距離計算(int32_t 右角度, int32_t 左角度): double
      - 走行距離計算()
    }

    ' 速度計算クラス
    class 速度計算器 {
      + 速度計算器コンストラクタ(Robot& ロボット, double 目標速度)
      + 右モーター出力計算(): double
      + 左モーター出力計算(): double
      - const 目標速度: double
      - 右PID制御: PID制御
      - 左PID制御: PID制御
      - 右モーター出力: double
      - 左モーター出力: double
      - 前回右時刻: double
      - 前回左時刻: double
      - ロボット: ロボット&
      - {static} constexpr 右比例ゲイン: double
      - {static} constexpr 右積分ゲイン: double
      - {static} constexpr 右微分ゲイン: double
      - {static} constexpr 左比例ゲイン: double
      - {static} constexpr 左積分ゲイン: double
      - {static} constexpr 左微分ゲイン: double
    }
  }

  package "動作部" {
    ' Motionクラス
    abstract class 動作 {
      + 動作コンストラクタ(Robot& ロボット)
      + {abstract} 実行(): void
      # ロボット: Robot&
    }

    ' 応用動作クラス
    abstract class 複合動作 {
      + 複合動作コンストラクタ(Robot& ロボット)
      + {abstract} 実行(): void
    }

    ' ライントレースクラス
    abstract class ライントレース {
      + ライントレースコンストラクタ(Robot& ロボット, double 目標速度, int 目標輝度, const PIDゲイン& PIDゲイン)
      + ライントレース実行(): void
      # {abstract} 事前条件判定(): bool
      # {abstract} 事前準備(): void
      # {abstract} 継続条件判定(): bool
      # 目標速度: double
      # 目標輝度: int
      # PIDゲイン: PIDゲイン
    }

    ' 直進クラス
    abstract class 直進 {
      + 直進コンストラクタ(Robot& ロボット, double 速度)
      + 直進実行(): void
      # {abstract} 事前条件判定(): bool
      # {abstract} 事前準備(): void
      # {abstract} 継続条件判定(): bool
      # 目標速度: double
    }

    ' 回頭クラス
    abstract class 回頭 {
      + 回頭コンストラクタ(Robot& ロボット, double 速度, bool 時計回り判定)
      + 回頭実行(): void
      + {abstract} 事前条件判定(): bool
      + {abstract} 事前準備(): void
      + {abstract} 継続条件判定(): bool
      # 速度: double
      # 時計回り判定: bool
      # 左符号: int
      # 右符号: int
    }

    ' 色指定ライントレースクラス
    class 色指定ライントレース {
      + 色指定ライントレースコンストラクタ(Robot& ロボット, 色 目標色, double 目標速度, int 目標輝度, const PIDゲイン& ゲイン)
      # 事前条件判定(): bool
      # 事前準備(): void
      # 指定色検出まで継続判定(): bool
      - {static} constexpr 判定回数: int
      - 色カウント: int
      - 目標色: 色
    }

    ' 距離指定ライントレースクラス
    class 距離指定ライントレース {
      + 距離指定ライントレースコンストラクタ(Robot& ロボット, double 目標距離, double 目標速度, int 目標輝度, const PIDゲイン& PIDゲイン)
      # 事前条件判定(): bool
      # 事前準備(): void
      # 指定距離まで継続判定(): bool
      - 目標距離: double
      - 初期距離: double
    }

    ' 色距離指定ライントレースクラス
    class 色距離指定ライントレース {
      + 色距離指定ライントレースコンストラクタ(Robot& ロボット, 色 目標色, double 目標距離, double 目標速度, int 目標輝度, const PIDゲイン& PIDゲイン)
      # 事前条件判定(): bool
      # 事前準備(): void
      # 色または距離まで継続判定(): bool
      - {static} constexpr 判定回数: int
      - 色カウント: int
      - 目標色: 色
      - 目標距離: double
      - 初期距離: double
    }

    ' 距離指定直進クラス
    class 距離指定直進 {
      + 距離指定直進コンストラクタ(Robot& ロボット, double 目標距離, double 速度)
      # 事前条件判定(): bool
      # 事前準備(): void
      # 指定距離まで継続判定(): bool
      - 目標距離: double
      - 初期距離: double
    }

    ' 色指定直進クラス
    class 色指定直進 {
      + 色指定直進コンストラクタ(Robot& ロボット, 色 目標色, double 速度)
      # 事前条件判定(): bool
      # 事前準備(): void
      # 指定色検出まで継続判定(): bool
      - 色カウント: int
      - 目標色: 色
      - {static} constexpr 判定回数: int
    }

    ' 角度指定回頭クラス
    class 角度指定回頭 {
      + 角度指定回頭コンストラクタ(Robot& ロボット, int 目標角度, double 速度, bool 時計回り判定)
      # 事前準備(): void
      # 事前条件判定(): bool
      # 指定角度まで継続判定(): bool
      - 左目標距離: double
      - 右目標距離: double
      - 目標角度: int
    }

    ' エッジ変更クラス
    class エッジ変更 {
      + エッジ変更コンストラクタ(Robot& ロボット, bool 左エッジ判定)
      + エッジ変更実行(): void
      - 左エッジ判定: bool
    }

    ' スリープクラス
    class スリープ {
      + スリープコンストラクタ(Robot& ロボット, int ミリ秒)
      + スリープ実行(): void
      - ミリ秒: int
    }
  }
}

' サブシステム、カメラ撮影システム
package "カメラ撮影システム" {
  package "撮影部" {
    ' カメラキャプチャーインターフェース
    abstract class カメラキャプチャインターフェース {
      + {abstract} ~カメラキャプチャインターフェース()
      + {abstract} 利用可能カメラID検索(int 最大テスト数): int
      + {abstract} カメラID取得(): int
      + {abstract} カメラID設定(int ID): bool
      + {abstract} カメラ開放(): bool
      + {abstract} 撮影プロパティ設定(double 幅, double 高さ): void
      + {abstract} フレーム取得(cv::Mat& 出力フレーム): bool
    }

    ' カメラキャプチャークラス
    class カメラキャプチャ {
      + カメラキャプチャコンストラクタ()
      + カメラキャプチャデストラクタ()
      + 利用可能カメラID検索(int 最大テスト数): int
      + カメラID取得(): int
      + カメラID設定(int ID): bool
      + カメラ開放(): bool
      + 撮影プロパティ設定(double 幅, double 高さ): void
      + フレーム取得(cv::Mat& 出力フレーム): bool
      - キャプチャ: cv::VideoCapture
      - カメラID: int
    }

    ' フレーム保存クラス
    class フレーム保存 {
      + {static} 画像保存(cv::Mat& フレーム, const std::string& ファイルパス, const std::string& ファイル名): void
      - フレーム保存コンストラクタ()
      - {static} inline 画像拡張子: std::string
    }
  }
}

' サブシステム、配置エリアA撮影システム
package "配置エリアA撮影システム" {
  package "配置エリアA攻略部" {
    ' ミニフィグカメラアクション
    class ミニフィグカメラ動作 {
      + ミニフィグカメラ動作コンストラクタ(Robot& ロボット, bool 時計回り判定, int 前目標角度, int 後目標角度, double 目標回転速度, double 後進目標距離, double 前進目標距離, double 後進速度, double 前進速度, int 位置)
      + ミニフィグ撮影動作実行(): void
      - 時計回り判定: bool
      - 前目標角度: int
      - 後目標角度: int
      - 目標回転速度: double
      - 後進目標距離: double
      - 前進目標距離: double
      - 後進速度: double
      - 前進速度: double
      - 位置: int
      - {static} constexpr ファイルパス: const char*
      - {static} constexpr アップロードファイル名: const char*
      - 事前条件判定(): bool
      - 方向検出(cv::Mat& フレーム): void
    }
  }

  package "ミニフィグ向き判定部" {
    ' ミニフィグ向き判定クラス
    class ミニフィグ方向検出器 {
      + ミニフィグ方向検出器コンストラクタ(const std::string& モデルパス)
      + ミニフィグ方向検出(const cv::Mat& フレーム, ミニフィグ方向判定結果& 結果): void
      - ネットワーク: cv::dnn::Net
      - モデルパス: std::string
      - 出力画像パス: std::string
      - 前処理(const cv::Mat& フレーム, float スケール, int パッドX, int パッドY): cv::Mat
      - 後処理(const std::vector<cv::Mat>& 出力, const cv::Mat& フレーム, float スケール, int パッドX, int パッドY, ミニフィグ方向判定結果& 結果): void
    }
  }
}

' サブシステム、配置エリアB撮影システム
package "配置エリアB撮影システム" {
  package "配置エリアB攻略部" {
    ' 風景プラレールカメラアクション
    class 背景プラレールカメラ動作 {
      + 背景プラレールカメラ動作(Robot& ロボット, bool 時計回り判定, int 前目標角度, int 後目標角度, double 目標回転速度, double 闾値, double 最小面積, const cv::Rect& 関心領域, int 位置)
      + 背景プラレール撮影動作実行(): void
      - 時計回り判定: bool
      - 前目標角度: int
      - 後目標角度: int
      - 目標回転速度: double
      - 闾値: double
      - 最小面積: double
      - 位置: int
      - 関心領域: cv::Rect
      - 事前条件判定(): bool
      - 方向検出(cv::Mat& フレーム): void
    }
  }

  package "動体検出部" {
    ' 動体検出クラス
    class 動体検出器 {
      + 動体検出器コンストラクタ(double 闾値, double 最小面積, const cv::Rect& 関心領域)
      + 背景設定(const cv::Mat& 背景): bool
      + 動体検出(const cv::Mat& フレーム, 境界ボックス検出結果& 結果): void
      + フレーム2枚比較(const cv::Mat& 第1フレーム, const cv::Mat& 第2フレーム): std::vector<cv::Point>
      - 闾値: double
      - 最小面積: double
      - 関心領域: cv::Rect
      - 背景フレーム: cv::Mat
    }

    ' プラレールカメラアクション
    class プラレールカメラ動作 {
      + プラレールカメラ動作コンストラクタ(Robot& ロボット, double 闾値, double 最小面積, const cv::Rect& 関心領域)
      + プラレール撮影動作実行(): void
      + 画像保存名設定(const std::string& ファイル名): void
      - 背景フレーム取得(): void
      - 動体検出器: 動体検出器
      - 画像保存名: std::string
      - {static} constexpr 最大無動体数: int
      - {static} constexpr ファイルパス: const char*
    }

    ' 画像処理系
    struct 境界ボックス検出結果 {
      + 検出済み: bool
      + 左上: cv::Point
      + 右上: cv::Point
      + 左下: cv::Point
      + 右下: cv::Point
    }

    abstract class 境界ボックス検出器 {
      + {abstract} ~境界ボックス検出器()
      + {abstract} 境界ボックス検出(const cv::Mat& フレーム, 境界ボックス検出結果& 結果): void
    }

    class ライン境界ボックス検出器 {
      + ライン境界ボックス検出器コンストラクタ(const cv::Scalar& 下位HSV, const cv::Scalar& 上位HSV)
      + ライン境界ボックス検出器コンストラクタ(const cv::Scalar& 下位HSV, const cv::Scalar& 上位HSV, const cv::Rect& 関心領域)
      + ライン境界ボックス検出器コンストラクタ(const cv::Scalar& 下位HSV, const cv::Scalar& 上位HSV, const cv::Rect& 関心領域, const cv::Size& 解像度)
      + ライン境界ボックス検出(const cv::Mat& フレーム, 境界ボックス検出結果& 結果): void
      - {static} 最小ライン輪郭面積: double
      - 下位HSV: cv::Scalar
      - 上位HSV: cv::Scalar
      - 関心領域: cv::Rect
      - 解像度: cv::Size
      - パラメータ検証(): void
    }
  }

  package "風景向き判定部" {
    ' 風景向き判定クラス
    class 背景方向検出器 {
      + 背景方向検出器コンストラクタ(const std::string& モデルパス)
      + 背景方向検出(const cv::Mat& フレーム, 背景方向判定結果& 結果): void
      - ネットワーク: cv::dnn::Net
      - モデルパス: std::string
      - 出力画像パス: std::string
      - 前処理(const cv::Mat& フレーム, float スケール, int パッドX, int パッドY): cv::Mat
      - 後処理(const std::vector<cv::Mat>& 出力, const cv::Mat& フレーム, float スケール, int パッドX, int パッドY, 背景方向判定結果& 結果): void
    }
  }
}

' サブシステム、ユーティリティシステム
package "ユーティリティシステム" {
  package "コマンド実行部" {
    ' シェルコマンド実行クラス
    class CommandExecutor {
      + {static} コマンド実行(const std::string& command): int
      - コマンド実行器コンストラクタ()
    }
  }
}

' サブシステム、走行体・無線通信デバイス間通信システム
package "走行体・無線通信デバイス間通信システム" {
  ' 走行体から無線通信デバイスへの画像アップロードクラス
  class ImageUploader {
    + {static} 画像アップロード(const std::string& imagePath, int maxAttempts): bool
    - 画像アップローダコンストラクタ()
  }
}

' サブシステム、画像アップロードシステム
package "画像アップロードシステム" {
  ' 別リポジトリの etrobocon2025-comm-device-system を参照
  ' 無線通信デバイスから競技システムへの画像アップロードクラス
  class OfficialInterface {
    + スナップアップロード(std::string imagePath): bool
  }
}

' 関係性の定義（同じ内容なので変更なし）

' 1. 継承関係 (Inheritance)
ライントレース --|> 動作 : 継承
直進 --|> 動作 : 継承
回頭 --|> 動作 : 継承
複合動作 --|> 動作 : 継承

距離指定ライントレース --|> ライントレース : 継承
色指定ライントレース --|> ライントレース : 継承
色距離指定ライントレース --|> ライントレース : 継承

距離指定直進 --|> 直進 : 継承
色指定直進 --|> 直進 : 継承

角度指定回頭 --|> 回頭 : 継承

ミニフィグカメラ動作 --|> 複合動作 : 継承
背景プラレールカメラ動作 --|> 複合動作 : 継承

エッジ変更 --|> 動作 : 継承
スリープ --|> 動作 : 継承

ライン境界ボックス検出器 --|> 境界ボックス検出器 : 継承
動体検出器 --|> 境界ボックス検出器 : 継承

' 2. 実現関係 (Realization)
カメラキャプチャ ..|> カメラキャプチャインターフェース : 実現

' 3. コンポジション関係 (Composition) - 強い所有関係
ETロボコン2025 *-- ロボット : コンポジション
ロボット *-- モーターコントローラ : コンポジション
ロボット *-- カメラキャプチャ : コンポジション
ロボット *-- "spikeapi::ColorSensor" : コンポジション
ロボット *-- "spikeapi::Clock" : コンポジション
ロボット *-- "spikeapi::Button" : コンポジション
ロボット *-- "spikeapi::ForceSensor" : コンポジション
ロボット *-- "spikeapi::Display" : コンポジション
ロボット *-- 背景方向判定結果 : コンポジション
ロボット *-- ミニフィグ方向判定結果 : コンポジション

モーターコントローラ *-- "spikeapi::Motor" : コンポジション

PID制御 *-- PIDゲイン : コンポジション

速度計算器 *-- PID制御 : コンポジション

プラレールカメラ動作 *-- 動体検出器 : コンポジション

色判定 *-- 色 : コンポジション

' 4. 集約関係 (Aggregation) - 弱い所有関係
ロボット o-- カメラキャプチャインターフェース : 集約

' 5. 関連関係 (Association) - 永続的な関係
エリアマスター --> ロボット : 関連
キャリブレーター --> ロボット : 関連
動作 --> ロボット : 関連

' 6. 依存関係 (Dependency) - 一時的な使用関係
エリアマスター ..> 動作解析器 : 依存
エリアマスター ..> Area : 依存

動作解析器 ..> 動作 : 依存
動作解析器 ..> COMMAND : 依存
動作解析器 ..> 色指定ライントレース : 依存
動作解析器 ..> 距離指定ライントレース : 依存
動作解析器 ..> 色距離指定ライントレース : 依存
動作解析器 ..> 距離指定直進 : 依存
動作解析器 ..> 色指定直進 : 依存
動作解析器 ..> 角度指定回頭 : 依存
動作解析器 ..> エッジ変更 : 依存
動作解析器 ..> スリープ : 依存
動作解析器 ..> ミニフィグカメラ動作 : 依存
動作解析器 ..> 背景プラレールカメラ動作 : 依存
動作解析器 ..> 文字列操作器 : 依存

ライントレース ..> PIDゲイン : 依存
ライントレース ..> 色判定 : 依存
ライントレース ..> 走行距離計算 : 依存
ライントレース ..> 速度計算器 : 依存

直進 ..> 速度計算器 : 依存

角度指定回頭 ..> 走行距離計算 : 依存
角度指定回頭 ..> システム情報 : 依存

走行距離計算 ..> システム情報 : 依存
モーターコントローラ ..> システム情報 : 依存
速度計算器 ..> システム情報 : 依存
ライン境界ボックス検出器 ..> システム情報 : 依存
プラレールカメラ動作 ..> システム情報 : 依存
ミニフィグカメラ動作 ..> システム情報 : 依存

色指定ライントレース ..> 色 : 依存
色指定直進 ..> 色 : 依存
色指定直進 ..> 色判定 : 依存
色距離指定ライントレース ..> 色 : 依存

境界ボックス検出器 ..> 境界ボックス検出結果 : 依存
ライン境界ボックス検出器 ..> 境界ボックス検出結果 : 依存
動体検出器 ..> 境界ボックス検出結果 : 依存

背景方向検出器 ..> 背景方向判定結果 : 依存
背景方向検出器 ..> 背景方向 : 依存

ミニフィグ方向検出器 ..> ミニフィグ方向判定結果 : 依存
ミニフィグ方向検出器 ..> ミニフィグ方向 : 依存

' 構造体と列挙型の関係
ミニフィグ方向判定結果 ..> ミニフィグ方向 : 依存
背景方向判定結果 ..> 背景方向 : 依存

ミニフィグカメラ動作 ..> フレーム保存 : 依存
ミニフィグカメラ動作 ..> ミニフィグ方向検出器 : 依存
ミニフィグカメラ動作 ..> 角度指定回頭 : 依存
ミニフィグカメラ動作 ..> 距離指定直進 : 依存
プラレールカメラ動作 ..> フレーム保存 : 依存
動体検出器 ..> フレーム保存 : 依存
背景プラレールカメラ動作 ..> 背景方向検出器 : 依存
背景プラレールカメラ動作 ..> プラレールカメラ動作 : 依存
背景プラレールカメラ動作 ..> 角度指定回頭 : 依存
ミニフィグカメラ動作 ..> 画像アップローダ : 依存
背景プラレールカメラ動作 ..> 画像アップローダ : 依存
画像アップローダ ..> コマンド実行器 : 依存

@enduml